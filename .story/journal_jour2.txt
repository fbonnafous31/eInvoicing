Jour 2 - Installation de la base, choix de DBeaver et modélisation métier
Installation et configuration de la base de données

Aujourd’hui, j’ai continué à poser les fondations techniques du projet en installant PostgreSQL, la base de données relationnelle choisie pour ce projet. Après quelques ajustements sur les droits utilisateurs et la création de la base, j’ai pu établir une connexion stable avec mon utilisateur dédié.

Cela m’a permis d’avoir un environnement robuste et évolutif, capable de gérer les données structurées des factures électroniques et des entités associées.
Choix de l’outil de gestion : DBeaver

Pour interagir avec ma base, j’ai opté pour DBeaver, un client SQL open source, riche en fonctionnalités, qui supporte PostgreSQL et offre une interface graphique complète.

DBeaver facilite la création, la visualisation et la modification des tables ainsi que l’exécution de requêtes SQL, ce qui accélère grandement la phase de développement. C’est un excellent complément à VSCode, surtout pour la partie base de données.
Modélisation des données : structure des tables

La partie la plus intéressante de la journée a été de dessiner la structure des données qui va porter le projet :

    Tables sellers et buyers : elles représentent les entités commerciales impliquées dans les factures, avec leurs informations légales, fiscales et bancaires.

    Table invoices : le cœur du système, elle regroupe toutes les informations essentielles d’une facture — numéros, dates, montants, références, et liens vers vendeur et acheteur.

    Tables invoice_lines et invoice_taxes : détaillent les lignes de facture et la ventilation des taxes, indispensables pour un traitement précis et conforme des documents.

Les commentaires associés à chaque colonne sont un atout précieux, ils garantissent que chaque donnée a un sens clair et que la maintenance future sera plus simple.
Conclusion du jour 2

Cette étape m’a permis de passer du concept à une base concrète, prête à être exploitée. Avec cette structure solide, je pourrai rapidement développer des fonctionnalités métier, générer des documents XML standardisés, et construire l’interface utilisateur pour la saisie des factures.

Demain, je compte approfondir l’intégration entre la base et mon backend Node.js, pour rendre les données accessibles et manipulables via une API.